[tox]
envlist =
    py{37,38,39,310},
    sanity,docs,flake8,pylint,coverage,benchmark

[testenv]
description = "Environment: {envname}"
commands_pre =
    python3 tests/title.py "Environment: {envname}"
commands =
    python -m pip -q install numpy wheel
    python -m pip -q install pycuda
    python -m pytest
extras =
    testing
deps =
    pytest

[testenv:coverage]
description = "Coverage"
basepython = python3
commands_pre =
    python3 tests/title.py "Coverage"
commands =
    python -m pip -q install numpy wheel
    python -m pip -q install pycuda
    coverage run --branch --source xentica -m pytest
commands_post =
    coverage report --show-missing --fail-under=100
deps =
    pytest
    coverage
setenv =
    COVERAGE_FILE=.coverage

[testenv:docs]
description = "Documentation"
commands_pre =
    python3 tests/title.py "Documentation"
basepython = python3
whitelist_externals = make
commands =
    make -C docs html
extras =
    docs
deps =
    sphinx
    sphinx_rtd_theme

[testenv:flake8]
description = "Codestyle Check"
commands_pre =
    python3 tests/title.py "Codestyle Check"
basepython = python3
deps =
    flake8
    flake8-docstrings
commands =
    flake8 .

[testenv:pylint]
description = "Static Analysis"
commands_pre =
    python3 tests/title.py "Static Analysis"
basepython = python3
deps =
    pylint
commands =
    pylint xentica examples docs tests

[testenv:benchmark]
description = "Benchmark"
commands_pre =
    python3 tests/title.py "Benchmark"
basepython = python3
commands =
    python -m pip -q install numpy wheel
    python -m pip -q install pycuda
    python3 tests/benchmark.py

[testenv:sanity]
description = "Sanity (Build) Checks"
commands_pre =
    python3 tests/title.py "Sanity Checks"
basepython = python3
commands =
    check-manifest --ignore tox*.ini,tests*,data*
    python setup.py check -m -r -s
deps =
    readme_renderer
    check-manifest

[flake8]
exclude = .tox,*.egg,build,data
select = E,W,F
